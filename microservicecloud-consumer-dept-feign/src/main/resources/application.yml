server:
  port: 80
  
# 是否开启熔断器
feign: 
  hystrix: 
    enabled: true



eureka:
  client:
    register-with-eureka: false
    service-url: 
      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/

# 测试一、
#ribbon:
#  OkToRetryOnAllOperations: false #对所有操作请求都进行重试,默认false
#  ReadTimeout: 1000   #负载均衡超时时间，默认值5000
#  ConnectTimeout: 3000 #ribbon请求连接的超时时间，默认值2000
#  MaxAutoRetries: 0     #对当前实例的重试次数，默认0
#  MaxAutoRetriesNextServer: 1 #对切换实例的重试次数，默认1
#
#hystrix:
#  command:
#    default:  #default全局有效，service id指定应用有效
#      execution:
#        timeout:
#          #如果enabled设置为false，则请求超时交给ribbon控制,为true,则超时作为熔断根据
#          enabled: true
#        isolation:
#          thread:
#            timeoutInMilliseconds: 5000 #断路器超时时间，默认1000ms

# 测试二、 和测试一相比 换了一下ReadTimeout 和 ConnectTimeout
ribbon:
  OkToRetryOnAllOperations: false #对所有操作请求都进行重试,默认false 只会对get请求进行重试。如果设置为true，便会对所有的请求进行重试
  ReadTimeout: 3000   #负载均衡超时时间，默认值5000  （http读取响应socket超时时间）
  ConnectTimeout: 1000 #ribbon请求连接的超时时间，默认值2000 （http建立socket超时时间）
  MaxAutoRetries: 2     #对当前实例的重试次数，默认0  （同一台实例最大重试次数，不包括首次调用）
  MaxAutoRetriesNextServer: 1 #对切换实例的重试次数，默认1 （重试负载均衡其他的实例最大重试次数，不包括首次调用）

hystrix:
  command:
    default:  #default全局有效，service id指定应用有效
      execution:
        timeout:
          #如果enabled设置为false，则请求超时交给ribbon控制,为true,则超时作为熔断根据
          enabled: true
        isolation:
          thread:
            timeoutInMilliseconds: 5000 #断路器超时时间，默认1000ms   这个值最好比Ribbon的超时时间长

# 总结 测试一和测试二得出结论：
# ReadTimeout和ConnectTimeout,当调用某个服务等待时间过长的时候,
# 对超时报错/熔断生效的是ReadTimeout,
# ConnectTimeout则表示连接服务的时间,一般不用配置太久,1~2秒左右就可以了

# 测试三、和测试二相比 换了一下ReadTimeout 和 timeoutInMilliseconds
#ribbon:
#  OkToRetryOnAllOperations: false #对所有操作请求都进行重试,默认false
#  ReadTimeout: 5000   #负载均衡超时时间，默认值5000
#  ConnectTimeout: 1000 #ribbon请求连接的超时时间，默认值2000
#  MaxAutoRetries: 0     #对当前实例的重试次数，默认0
#  MaxAutoRetriesNextServer: 1 #对切换实例的重试次数，默认1
#
#hystrix:
#  command:
#    default:  #default全局有效，service id指定应用有效
#      execution:
#        timeout:
#          #是否开启超时熔断
#          enabled: true
#        isolation:
#          thread:
#            timeoutInMilliseconds: 3000 #断路器超时时间，默认1000ms

# 测试四、和测试三相比 换了一下enabled: false
#ribbon:
#  OkToRetryOnAllOperations: false #对所有操作请求都进行重试,默认false
#  ReadTimeout: 5000   #负载均衡超时时间，默认值5000
#  ConnectTimeout: 1000 #ribbon请求连接的超时时间，默认值2000
#  MaxAutoRetries: 0     #对当前实例的重试次数，默认0
#  MaxAutoRetriesNextServer: 1 #对切换实例的重试次数，默认1
#
#hystrix:
#  command:
#    default:  #default全局有效，service id指定应用有效
#      execution:
#        timeout:
#          #是否开启超时熔断
#          enabled: false
#        isolation:
#          thread:
#            timeoutInMilliseconds: 3000 #断路器超时时间，默认1000ms